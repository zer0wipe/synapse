/**
 * settings.ts
 *
 * This file defines the configuration settings for the Synapse Obsidian plugin.
 * It includes the interface for the settings, default values, and the implementation
 * of the settings tab that allows users to configure the plugin within Obsidian.
 */
import { App, PluginSettingTab, Setting } from "obsidian";
import SynapsePlugin from "../main";

/**
 * Defines the structure of the Synapse plugin's settings.
 */
export interface SynapseSettings {
  // The Ollama API endpoint URL
  ollamaEndpoint: string;
  // The identifier for the selected LLM API provider.
  apiProvider: string;
  // The name of the LLM model to use for generating the main content of responses.
  model: string;
  // The folder path where new notes generated by Synapse will be created.
  // If empty, new notes are created in the same folder as the source note.
  newNoteFolder: string;
  // The number of backlinks to traverse when building conversational context. A higher number provides more context but may increase processing time.
  contextDepth: number;
  // The system-level prompt that defines the AI assistant's persona and instructions.
  systemPrompt: string;
}

/**
 * Default values for the Synapse plugin settings.
 * These are applied when the plugin is first loaded or if a setting is not explicitly configured by the user.
 */
export const DEFAULT_SETTINGS: SynapseSettings = {
  ollamaEndpoint: "http://localhost:11434",
  apiProvider: "Ollama",
  model: "mistral",
  newNoteFolder: "", // Default to root (or same folder as source note)
  contextDepth: 5,
  systemPrompt: `You are Synapse, an AI assistant embedded within a knowledge graph (Obsidian). 
The user is expanding their thoughts. Analyze the provided context (a chain of previous notes) and respond to the latest prompt. 
Your response will be saved as a new, linked note. Be insightful and continue the line of reasoning.
The first line of your response should be a concise, descriptive title (5-10 words) for the note. The rest of the response should be the content of the note.`,
};

/**
 * Implements the settings tab for the Synapse plugin.
 * This class extends Obsidian's `PluginSettingTab` to provide a UI for users to configure plugin settings.
 */
export class SynapseSettingTab extends PluginSettingTab {
  // Reference to the main Synapse plugin instance.
  plugin: SynapsePlugin;

  /**
   * Constructs a new SynapseSettingTab instance.
   * @param app The Obsidian App instance.
   * @param plugin The main Synapse plugin instance.
   */
  constructor(app: App, plugin: SynapsePlugin) {
    super(app, plugin);
    this.plugin = plugin;
  }

  /**
   * Renders the settings UI elements in the settings tab.
   * This method is called when the settings tab is opened.
   */
  display(): void {
    const { containerEl } = this;
    containerEl.empty(); // Clear existing content before rendering.

    // Setting for Ollama Endpoint
    new Setting(containerEl)
      .setName("Ollama Endpoint")
      .setDesc(
        "Enter your Ollama API endpoint URL. Default is http://localhost:11434",
      )
      .addText((text) => {
        text
          .setPlaceholder("http://localhost:11434")
          .setValue(this.plugin.settings.ollamaEndpoint)
          .onChange(async (value) => {
            this.plugin.settings.ollamaEndpoint = value;
            await this.plugin.saveSettings();
          });
      });

    // Setting for API Provider selection
    new Setting(containerEl)
      .setName("API Provider")
      .setDesc(
        "Select the API provider for the Large Language Model. Currently only Ollama is supported.",
      )
      .addDropdown((dropdown) =>
        dropdown
          .addOption("Ollama", "Ollama")
          .setValue(this.plugin.settings.apiProvider)
          .onChange(async (value) => {
            this.plugin.settings.apiProvider = value;
            await this.plugin.saveSettings();
          }),
      );

    // Setting for Primary LLM Model
    new Setting(containerEl)
      .setName("Primary Model")
      .setDesc(
        "The LLM model to use for generating the main content of responses.",
      )
      .addText((text) =>
        text
          .setPlaceholder("e.g., gemini-1.5-flash")
          .setValue(this.plugin.settings.model)
          .onChange(async (value) => {
            this.plugin.settings.model = value;
            await this.plugin.saveSettings();
          }),
      );

    // Setting for New Note Folder
    new Setting(containerEl)
      .setName("New Note Folder")
      .setDesc(
        "The folder where new conversation notes will be created. If left empty, notes will be created in the same folder as the source note.",
      )
      .addText((text) =>
        text
          .setPlaceholder("e.g., Synapse Conversations")
          .setValue(this.plugin.settings.newNoteFolder)
          .onChange(async (value) => {
            this.plugin.settings.newNoteFolder = value;
            await this.plugin.saveSettings();
          }),
      );

    // Setting for Context Depth
    new Setting(containerEl)
      .setName("Context Depth")
      .setDesc(
        "How many levels of backlinks to traverse to build the conversation history for the LLM. A higher number provides more context but may increase processing time.",
      )
      .addSlider((slider) =>
        slider
          .setLimits(1, 15, 1) // Allow depth from 1 to 15.
          .setValue(this.plugin.settings.contextDepth)
          .setDynamicTooltip() // Show current value as tooltip.
          .onChange(async (value) => {
            this.plugin.settings.contextDepth = value;
            await this.plugin.saveSettings();
          }),
      );

    // Setting for System Prompt (TextArea)
    const systemPromptSetting = new Setting(containerEl)
      .setName("System Prompt")
      .setDesc(
        "Define the system prompt for the AI assistant. This sets the AI's persona, tone, and core instructions for generating responses.",
      );

    // Adjust styling for the textarea to take full width and align correctly.
    systemPromptSetting.settingEl.style.flexDirection = "column";
    systemPromptSetting.settingEl.style.alignItems = "flex-start";
    systemPromptSetting.controlEl.style.width = "100%";

    systemPromptSetting.addTextArea((text) => {
      text
        .setPlaceholder("You are Synapse, an AI assistant...")
        .setValue(this.plugin.settings.systemPrompt)
        .onChange(async (value) => {
          this.plugin.settings.systemPrompt = value;
          await this.plugin.saveSettings();
        });
      // Auto-resize the textarea for the system prompt.
      text.inputEl.style.width = "100%";
      text.inputEl.style.marginTop = "10px";
      text.inputEl.style.height = "auto";
      text.inputEl.style.overflowY = "hidden";
      text.inputEl.addEventListener("input", () => {
        text.inputEl.style.height = "auto";
        text.inputEl.style.height = text.inputEl.scrollHeight + "px";
      });
    });
  }
}
